{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { PrimeReactContext } from 'primereact/api';\nimport { useEventListener, useMountEffect, useUpdateEffect, useUnmountEffect } from 'primereact/hooks';\nimport { ObjectUtils, DomHandler } from 'primereact/utils';\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nvar StyleClassBase = {\n  defaultProps: {\n    __TYPE: 'StyleClass',\n    nodeRef: null,\n    selector: null,\n    enterClassName: null,\n    enterFromClassName: null,\n    enterActiveClassName: null,\n    enterToClassName: null,\n    leaveClassName: null,\n    leaveFromClassName: null,\n    leaveActiveClassName: null,\n    leaveToClassName: null,\n    hideOnOutsideClick: false,\n    toggleClassName: null,\n    children: undefined\n  },\n  getProps: function getProps(props) {\n    return ObjectUtils.getMergedProps(props, StyleClassBase.defaultProps);\n  },\n  getOtherProps: function getOtherProps(props) {\n    return ObjectUtils.getDiffProps(props, StyleClassBase.defaultProps);\n  }\n};\nvar StyleClass = /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var context = React.useContext(PrimeReactContext);\n  var props = StyleClassBase.getProps(inProps, context);\n  var targetRef = React.useRef(null);\n  var animating = React.useRef(false);\n  var elementRef = React.useRef(null);\n  var _useEventListener = useEventListener({\n      type: 'animationend',\n      listener: function listener() {\n        DomHandler.removeClass(targetRef.current, props.enterActiveClassName);\n        if (props.enterToClassName) {\n          DomHandler.addClass(targetRef.current, props.enterToClassName);\n        }\n        unbindTargetEnterListener();\n        if (props.enterActiveClassName === 'slidedown') {\n          targetRef.current.style.maxHeight = '';\n        }\n        animating.current = false;\n      }\n    }),\n    _useEventListener2 = _slicedToArray(_useEventListener, 2),\n    bindTargetEnterListener = _useEventListener2[0],\n    unbindTargetEnterListener = _useEventListener2[1];\n  var _useEventListener3 = useEventListener({\n      type: 'animationend',\n      listener: function listener() {\n        DomHandler.removeClass(targetRef.current, props.leaveActiveClassName);\n        if (props.leaveToClassName) {\n          DomHandler.addClass(targetRef.current, props.leaveToClassName);\n        }\n        unbindTargetLeaveListener();\n        animating.current = false;\n      }\n    }),\n    _useEventListener4 = _slicedToArray(_useEventListener3, 2),\n    bindTargetLeaveListener = _useEventListener4[0],\n    unbindTargetLeaveListener = _useEventListener4[1];\n  var _useEventListener5 = useEventListener({\n      type: 'click',\n      listener: function listener(event) {\n        if (!isVisible(targetRef.current) || getComputedStyle(targetRef.current).getPropertyValue('position') === 'static') {\n          unbindDocumentClickListener();\n        } else if (isOutsideClick(event)) {\n          leave();\n        }\n      },\n      when: props.hideOnOutsideClick\n    }),\n    _useEventListener6 = _slicedToArray(_useEventListener5, 2),\n    bindDocumentClickListener = _useEventListener6[0],\n    unbindDocumentClickListener = _useEventListener6[1];\n  var _useEventListener7 = useEventListener({\n      type: 'click',\n      listener: function listener() {\n        targetRef.current = resolveTarget();\n        if (props.toggleClassName) {\n          if (DomHandler.hasClass(targetRef.current, props.toggleClassName)) {\n            DomHandler.removeClass(targetRef.current, props.toggleClassName);\n          } else {\n            DomHandler.addClass(targetRef.current, props.toggleClassName);\n          }\n        } else {\n          DomHandler.isVisible(targetRef.current) ? leave() : enter();\n        }\n      }\n    }),\n    _useEventListener8 = _slicedToArray(_useEventListener7, 2),\n    bindClickListener = _useEventListener8[0],\n    unbindClickListener = _useEventListener8[1];\n  var enter = function enter() {\n    if (props.enterActiveClassName) {\n      if (!animating.current) {\n        animating.current = true;\n        if (props.enterActiveClassName === 'slidedown') {\n          targetRef.current.style.height = '0px';\n          DomHandler.removeClass(targetRef.current, 'hidden');\n          targetRef.current.style.maxHeight = targetRef.current.scrollHeight + 'px';\n          DomHandler.addClass(targetRef.current, 'hidden');\n          targetRef.current.style.height = '';\n        }\n        DomHandler.addClass(targetRef.current, props.enterActiveClassName);\n\n        // enterClassName will be deprecated, use enterFromClassName\n        if (props.enterClassName) {\n          DomHandler.removeClass(targetRef.current, props.enterClassName);\n        }\n        if (props.enterFromClassName) {\n          DomHandler.removeClass(targetRef.current, props.enterFromClassName);\n        }\n        bindTargetEnterListener({\n          target: targetRef.current\n        });\n      }\n    } else {\n      // enterClassName will be deprecated, use enterFromClassName\n      if (props.enterClassName) {\n        DomHandler.removeClass(targetRef.current, props.enterClassName);\n      }\n      if (props.enterFromClassName) {\n        DomHandler.removeClass(targetRef.current, props.enterFromClassName);\n      }\n      if (props.enterToClassName) {\n        DomHandler.addClass(targetRef.current, props.enterToClassName);\n      }\n    }\n    bindDocumentClickListener({\n      target: elementRef.current && elementRef.current.ownerDocument\n    });\n  };\n  var leave = function leave() {\n    if (props.leaveActiveClassName) {\n      if (!animating.current) {\n        animating.current = true;\n        DomHandler.addClass(targetRef.current, props.leaveActiveClassName);\n\n        // leaveClassName will be deprecated, use leaveFromClassName\n        if (props.leaveClassName) {\n          DomHandler.removeClass(targetRef.current, props.leaveClassName);\n        }\n        if (props.leaveFromClassName) {\n          DomHandler.removeClass(targetRef.current, props.leaveFromClassName);\n        }\n        bindTargetLeaveListener({\n          target: targetRef.current\n        });\n      }\n    } else {\n      // leaveClassName will be deprecated, use leaveFromClassName\n      if (props.leaveClassName) {\n        DomHandler.removeClass(targetRef.current, props.leaveClassName);\n      }\n      if (props.leaveFromClassName) {\n        DomHandler.removeClass(targetRef.current, props.leaveFromClassName);\n      }\n      if (props.leaveToClassName) {\n        DomHandler.addClass(targetRef.current, props.leaveToClassName);\n      }\n    }\n    if (props.hideOnOutsideClick) {\n      unbindDocumentClickListener();\n    }\n  };\n  var resolveTarget = function resolveTarget() {\n    if (targetRef.current) {\n      return targetRef.current;\n    }\n    switch (props.selector) {\n      case '@next':\n        return elementRef.current && elementRef.current.nextElementSibling;\n      case '@prev':\n        return elementRef.current && elementRef.current.previousElementSibling;\n      case '@parent':\n        return elementRef.current && elementRef.current.parentElement;\n      case '@grandparent':\n        return elementRef.current && elementRef.current.parentElement.parentElement;\n      default:\n        return document.querySelector(props.selector);\n    }\n  };\n  var init = function init() {\n    Promise.resolve().then(function () {\n      elementRef.current = ObjectUtils.getRefElement(props.nodeRef);\n      bindClickListener({\n        target: elementRef.current\n      });\n    });\n  };\n  var destroy = function destroy() {\n    unbindClickListener();\n    unbindDocumentClickListener();\n    targetRef.current = null;\n  };\n  var isVisible = function isVisible(target) {\n    return target && target.offsetParent !== null;\n  };\n  var isOutsideClick = function isOutsideClick(event) {\n    return !elementRef.current.isSameNode(event.target) && !elementRef.current.contains(event.target) && !targetRef.current.contains(event.target);\n  };\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      getElement: function getElement() {\n        return elementRef.current;\n      },\n      getTarget: function getTarget() {\n        return targetRef.current;\n      }\n    };\n  });\n  useMountEffect(function () {\n    init();\n  });\n  useUpdateEffect(function () {\n    init();\n    return function () {\n      unbindClickListener();\n    };\n  });\n  useUnmountEffect(function () {\n    destroy();\n  });\n  return props.children;\n});\nStyleClass.displayName = 'StyleClass';\nexport { StyleClass };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}