{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport PrimeReact, { PrimeReactContext } from 'primereact/api';\nimport { ComponentBase, useHandleStyle } from 'primereact/componentbase';\nimport { CSSTransition } from 'primereact/csstransition';\nimport { useMergeProps, useUpdateEffect, useMatchMedia, useEventListener, useResizeListener, useMountEffect, useUnmountEffect } from 'primereact/hooks';\nimport { OverlayService } from 'primereact/overlayservice';\nimport { Portal } from 'primereact/portal';\nimport { classNames, DomHandler, ObjectUtils, IconUtils, UniqueComponentId, ZIndexUtils } from 'primereact/utils';\nimport { AngleRightIcon } from 'primereact/icons/angleright';\nimport { Ripple } from 'primereact/ripple';\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nvar classes = {\n  root: function root(_ref) {\n    var props = _ref.props,\n      context = _ref.context;\n    return classNames('p-tieredmenu p-component', {\n      'p-tieredmenu-overlay': props.popup,\n      'p-input-filled': context && context.inputStyle === 'filled' || PrimeReact.inputStyle === 'filled',\n      'p-ripple-disabled': context && context.ripple === false || PrimeReact.ripple === false\n    });\n  },\n  separator: 'p-menuitem-separator',\n  icon: function icon(_ref2) {\n    var _icon = _ref2._icon;\n    return classNames('p-menuitem-icon', _icon);\n  },\n  content: 'p-menuitem-content',\n  label: 'p-menuitem-text',\n  submenuIcon: 'p-submenu-icon',\n  action: 'p-menuitem-link',\n  menuitem: function menuitem(_ref3) {\n    var itemClassName = _ref3.itemClassName,\n      active = _ref3.active,\n      focused = _ref3.focused,\n      disabled = _ref3.disabled;\n    return classNames('p-menuitem', {\n      'p-menuitem-active p-highlight': active,\n      'p-focus': focused,\n      'p-disabled': disabled\n    }, itemClassName);\n  },\n  menu: 'p-tieredmenu-root-list',\n  submenu: 'p-submenu-list',\n  transition: 'p-connected-overlay'\n};\nvar inlineStyles = {\n  submenu: function submenu(_ref4) {\n    var props = _ref4.subProps;\n    return {\n      display: !props.root && props.parentActive ? 'block' : 'none'\n    };\n  }\n};\nvar styles = \"\\n@layer primereact {\\n    .p-tieredmenu-overlay {\\n        position: absolute;\\n    }\\n\\n    .p-tieredmenu ul {\\n        margin: 0;\\n        padding: 0;\\n        list-style: none;\\n    }\\n\\n    .p-tieredmenu .p-submenu-list {\\n        position: absolute;\\n        min-width: 100%;\\n        z-index: 1;\\n        display: none;\\n    }\\n\\n    .p-tieredmenu .p-menuitem-link {\\n        cursor: pointer;\\n        display: flex;\\n        align-items: center;\\n        text-decoration: none;\\n        overflow: hidden;\\n        position: relative;\\n    }\\n\\n    .p-tieredmenu .p-menuitem-text {\\n        line-height: 1;\\n    }\\n\\n    .p-tieredmenu .p-menuitem {\\n        position: relative;\\n    }\\n\\n    .p-tieredmenu .p-menuitem-link .p-submenu-icon {\\n        margin-left: auto;\\n    }\\n\\n    .p-tieredmenu .p-menuitem-active > .p-submenu-list {\\n        display: block;\\n        left: 100%;\\n        top: 0;\\n    }\\n\\n    .p-tieredmenu .p-menuitem-active > .p-submenu-list-flipped {\\n        left: -100%;\\n    }\\n}\\n\";\nvar TieredMenuBase = ComponentBase.extend({\n  defaultProps: {\n    __TYPE: 'TieredMenu',\n    id: null,\n    model: null,\n    popup: false,\n    style: null,\n    className: null,\n    autoZIndex: true,\n    baseZIndex: 0,\n    breakpoint: undefined,\n    scrollHeight: '400px',\n    appendTo: null,\n    transitionOptions: null,\n    onShow: null,\n    onFocus: null,\n    onBlur: null,\n    onHide: null,\n    submenuIcon: null,\n    children: undefined\n  },\n  css: {\n    classes: classes,\n    styles: styles,\n    inlineStyles: inlineStyles\n  }\n});\nfunction ownKeys$1(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread$1(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys$1(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys$1(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar TieredMenuSub = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var elementRef = React.useRef(null);\n  var mergeProps = useMergeProps();\n  var ptm = props.ptm,\n    cx = props.cx,\n    sx = props.sx;\n  var getPTOptions = function getPTOptions(item, key) {\n    return ptm(key, {\n      hostName: props.hostName,\n      context: {\n        active: isItemActive(item)\n      }\n    });\n  };\n  var position = function position() {\n    if (elementRef.current) {\n      var parentItem = elementRef.current.parentElement;\n      var containerOffset = DomHandler.getOffset(parentItem);\n      var viewport = DomHandler.getViewport();\n      var sublistWidth = elementRef.current.offsetParent ? elementRef.current.offsetWidth : DomHandler.getHiddenElementOuterWidth(elementRef.current);\n      var itemOuterWidth = DomHandler.getOuterWidth(parentItem.children[0]);\n      var top = parseInt(containerOffset.top, 10) + elementRef.current.offsetHeight - DomHandler.getWindowScrollTop();\n      if (top > viewport.height) {\n        elementRef.current.style.top = viewport.height - top + 'px';\n      } else {\n        elementRef.current.style.top = '0px';\n      }\n      if (parseInt(containerOffset.left, 10) + itemOuterWidth + sublistWidth > viewport.width - DomHandler.calculateScrollbarWidth()) {\n        DomHandler.addClass(elementRef.current, 'p-submenu-list-flipped');\n      }\n    }\n  };\n  var onItemClick = function onItemClick(event, processedItem) {\n    var item = processedItem.item;\n    if (isItemDisabled(processedItem)) {\n      event.preventDefault();\n      return;\n    }\n    if (item.command) {\n      item.command({\n        originalEvent: event,\n        item: item\n      });\n    }\n    props.onItemClick && props.onItemClick({\n      originalEvent: event,\n      processedItem: processedItem\n    });\n    if (!item.url) {\n      event.preventDefault();\n      event.stopPropagation();\n    }\n  };\n  var getItemId = function getItemId(processedItem) {\n    return \"\".concat(props.menuId, \"_\").concat(processedItem.key);\n  };\n  var getItemProp = function getItemProp(processedItem, name, params) {\n    return processedItem && processedItem.item ? ObjectUtils.getItemValue(processedItem.item[name], params) : undefined;\n  };\n  var isItemActive = function isItemActive(processedItem) {\n    return props.activeItemPath.some(function (path) {\n      return path.key === processedItem.key;\n    });\n  };\n  var isItemVisible = function isItemVisible(processedItem) {\n    return getItemProp(processedItem, 'visible') !== false;\n  };\n  var isItemDisabled = function isItemDisabled(processedItem) {\n    return getItemProp(processedItem, 'disabled');\n  };\n  var isItemFocused = function isItemFocused(processedItem) {\n    return props.focusedItemId === getItemId(processedItem);\n  };\n  var isItemGroup = function isItemGroup(processedItem) {\n    return ObjectUtils.isNotEmpty(processedItem.items);\n  };\n  var onItemMouseEnter = function onItemMouseEnter(event, processedItem) {\n    props.onItemMouseEnter && props.onItemMouseEnter({\n      originalEvent: event,\n      processedItem: processedItem\n    });\n  };\n  var getAriaSetSize = function getAriaSetSize() {\n    return props.model.filter(function (processedItem) {\n      return isItemVisible(processedItem) && !getItemProp(processedItem, 'separator');\n    }).length;\n  };\n  var getAriaPosInset = function getAriaPosInset(index) {\n    return index - props.model.slice(0, index).filter(function (processedItem) {\n      return isItemVisible(processedItem) && getItemProp(processedItem, 'separator');\n    }).length + 1;\n  };\n  useUpdateEffect(function () {\n    if (!props.root && props.parentActive && !props.isMobileMode) {\n      position();\n    }\n  }, [props.parentActive]);\n  React.useImperativeHandle(ref, function () {\n    return {\n      getElement: function getElement() {\n        return elementRef.current;\n      }\n    };\n  });\n  var createSeparator = function createSeparator(index) {\n    var key = 'separator_' + index;\n    var separatorProps = mergeProps({\n      key: key,\n      className: cx('separator'),\n      role: 'separator'\n    }, ptm('separator', {\n      hostName: props.hostName\n    }));\n    return /*#__PURE__*/React.createElement(\"li\", separatorProps);\n  };\n  var createSubmenu = function createSubmenu(processedItem, index) {\n    if (isItemGroup(processedItem)) {\n      return /*#__PURE__*/React.createElement(TieredMenuSub, {\n        id: props.id + '_' + index,\n        menuProps: props.menuProps,\n        model: processedItem.items,\n        menuId: props.menuId,\n        ariaLabelledby: getItemId(processedItem),\n        focusedItemId: props.focusedItemId,\n        activeItemPath: props.activeItemPath,\n        level: props.level + 1,\n        onItemClick: props.onItemClick,\n        popup: props.popup,\n        onItemMouseEnter: props.onItemMouseEnter,\n        parentActive: isItemActive(processedItem),\n        isMobileMode: props.isMobileMode,\n        submenuIcon: props.submenuIcon,\n        ptm: props.ptm,\n        cx: cx,\n        sx: sx\n      });\n    }\n    return null;\n  };\n  var createMenuItem = function createMenuItem(processedItem, index) {\n    if (isItemVisible(processedItem) === false) {\n      return null;\n    }\n    var item = processedItem.item;\n    var style = getItemProp(processedItem, 'style');\n    var itemClassName = getItemProp(processedItem, 'className');\n    var _icon = getItemProp(processedItem, 'icon');\n    var target = getItemProp(processedItem, 'target');\n    var url = getItemProp(processedItem, 'url');\n    var key = getItemId(processedItem);\n    var focused = isItemFocused(processedItem);\n    var active = isItemActive(processedItem);\n    var disabled = isItemDisabled(processedItem);\n    var grouped = isItemGroup(processedItem);\n    var linkClassName = classNames('p-menuitem-link');\n    var iconClassName = classNames('p-menuitem-icon', _icon);\n    var iconProps = mergeProps({\n      className: classNames(item.icon, 'p-menuitem-icon', 'icon')\n    }, getPTOptions(processedItem, 'icon'));\n    var icon = IconUtils.getJSXIcon(_icon, _objectSpread$1({}, iconProps), {\n      props: props.menuProps\n    });\n    var labelProps = mergeProps({\n      className: cx('label')\n    }, getPTOptions(processedItem, 'label'));\n    var label = item.label && /*#__PURE__*/React.createElement(\"span\", labelProps, item.label);\n    var submenuIconClassName = 'p-submenu-icon';\n    var submenuIconProps = mergeProps({\n      className: cx('submenuIcon')\n    }, getPTOptions(processedItem, 'submenuIcon'));\n    var submenuIcon = grouped && IconUtils.getJSXIcon(props.submenuIcon || /*#__PURE__*/React.createElement(AngleRightIcon, submenuIconProps), _objectSpread$1({}, submenuIconProps), {\n      props: props.menuProps\n    });\n    var submenu = createSubmenu(processedItem, index);\n    var actionProps = mergeProps({\n      href: url || '#',\n      'aria-hidden': true,\n      tabIndex: '-1',\n      onFocus: function onFocus(event) {\n        return event.stopPropagation();\n      },\n      className: cx('action'),\n      target: target\n    }, getPTOptions(processedItem, 'action'));\n    var content = /*#__PURE__*/React.createElement(\"a\", actionProps, icon, label, submenuIcon, /*#__PURE__*/React.createElement(Ripple, null));\n    if (item.template) {\n      var defaultContentOptions = {\n        className: linkClassName,\n        labelClassName: 'p-menuitem-text',\n        iconClassName: iconClassName,\n        submenuIconClassName: submenuIconClassName,\n        element: content,\n        props: props,\n        active: active,\n        disabled: disabled\n      };\n      content = ObjectUtils.getJSXElement(item.template, item, defaultContentOptions);\n    }\n    var contentProps = mergeProps({\n      onClick: function onClick(event) {\n        return onItemClick(event, processedItem);\n      },\n      onMouseEnter: function onMouseEnter(event) {\n        return onItemMouseEnter(event, processedItem);\n      },\n      className: cx('content')\n    }, getPTOptions(processedItem, 'content'));\n    var menuitemProps = mergeProps({\n      key: key,\n      id: key,\n      'aria-label': item.label,\n      'aria-disabled': disabled,\n      'aria-expanded': grouped ? active : undefined,\n      'aria-haspopup': grouped && !url ? 'menu' : undefined,\n      'aria-setsize': getAriaSetSize(),\n      'aria-posinset': getAriaPosInset(index),\n      'data-p-highlight': active,\n      'data-p-disabled': disabled,\n      'data-p-visited': focused,\n      className: cx('menuitem', {\n        itemClassName: itemClassName,\n        active: active,\n        focused: focused,\n        disabled: disabled\n      }),\n      style: style,\n      onMouseEnter: function onMouseEnter(event) {\n        return onItemMouseEnter(event, item);\n      },\n      role: 'menuitem'\n    }, getPTOptions(processedItem, 'menuitem'));\n    return /*#__PURE__*/React.createElement(\"li\", menuitemProps, /*#__PURE__*/React.createElement(\"div\", contentProps, content), submenu);\n  };\n  var createItem = function createItem(processedItem, index) {\n    return getItemProp(processedItem, 'separator') ? createSeparator(index) : createMenuItem(processedItem, index);\n  };\n  var createMenu = function createMenu() {\n    return props.model ? props.model.map(createItem) : null;\n  };\n  var submenu = createMenu();\n  var ptKey = props.root ? 'menu' : 'submenu';\n  var menuProps = mergeProps({\n    ref: elementRef,\n    id: props.id,\n    tabIndex: props.tabIndex,\n    onFocus: props.onFocus,\n    onBlur: props.onBlur,\n    onKeyDown: props.onKeyDown,\n    className: cx(ptKey, {\n      subProps: props\n    }),\n    style: sx(ptKey, {\n      subProps: props\n    }),\n    role: props.root ? 'menubar' : 'menu',\n    'aria-label': props.ariaLabel,\n    'aria-labelledby': props.ariaLabelledby,\n    'aria-orientation': props.ariaOrientation,\n    'aria-activedescendant': props.focusedItemId\n  }, ptm(ptKey, {\n    hostName: props.hostName\n  }));\n  return /*#__PURE__*/React.createElement(\"ul\", menuProps, submenu);\n}));\nTieredMenuSub.displayName = 'TieredMenuSub';\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar TieredMenu = /*#__PURE__*/React.memo( /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var mergeProps = useMergeProps();\n  var context = React.useContext(PrimeReactContext);\n  var props = TieredMenuBase.getProps(inProps, context);\n  var _React$useState = React.useState(props.id),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    idState = _React$useState2[0],\n    setIdState = _React$useState2[1];\n  var _React$useState3 = React.useState(!props.popup),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    visibleState = _React$useState4[0],\n    setVisibleState = _React$useState4[1];\n  var _React$useState5 = React.useState([]),\n    _React$useState6 = _slicedToArray(_React$useState5, 2),\n    activeItemPath = _React$useState6[0],\n    setActiveItemPath = _React$useState6[1];\n  var _React$useState7 = React.useState(false),\n    _React$useState8 = _slicedToArray(_React$useState7, 2),\n    focused = _React$useState8[0],\n    setFocused = _React$useState8[1];\n  var _React$useState9 = React.useState(null),\n    _React$useState10 = _slicedToArray(_React$useState9, 2),\n    focusedItemId = _React$useState10[0],\n    setFocusedItemId = _React$useState10[1];\n  var _React$useState11 = React.useState({\n      index: -1,\n      level: 0,\n      parentKey: ''\n    }),\n    _React$useState12 = _slicedToArray(_React$useState11, 2),\n    focusedItemInfo = _React$useState12[0],\n    setFocusedItemInfo = _React$useState12[1];\n  var _React$useState13 = React.useState(false),\n    _React$useState14 = _slicedToArray(_React$useState13, 2),\n    dirty = _React$useState14[0],\n    setDirty = _React$useState14[1];\n  var _React$useState15 = React.useState([]),\n    _React$useState16 = _slicedToArray(_React$useState15, 2),\n    processedItems = _React$useState16[0],\n    setProcessedItems = _React$useState16[1];\n  var _React$useState17 = React.useState([]),\n    _React$useState18 = _slicedToArray(_React$useState17, 2),\n    visibleItems = _React$useState18[0],\n    setVisibleItems = _React$useState18[1];\n  var _React$useState19 = React.useState(false),\n    _React$useState20 = _slicedToArray(_React$useState19, 2),\n    focusTrigger = _React$useState20[0],\n    setFocusTrigger = _React$useState20[1];\n  var _React$useState21 = React.useState(null),\n    _React$useState22 = _slicedToArray(_React$useState21, 2),\n    attributeSelectorState = _React$useState22[0],\n    setAttributeSelectorState = _React$useState22[1];\n  var _TieredMenuBase$setMe = TieredMenuBase.setMetaData({\n      props: props,\n      state: {\n        id: idState,\n        visible: visibleState,\n        attributeSelector: attributeSelectorState\n      }\n    }),\n    ptm = _TieredMenuBase$setMe.ptm,\n    cx = _TieredMenuBase$setMe.cx,\n    sx = _TieredMenuBase$setMe.sx,\n    isUnstyled = _TieredMenuBase$setMe.isUnstyled;\n  useHandleStyle(TieredMenuBase.css.styles, isUnstyled, {\n    name: 'tieredmenu'\n  });\n  var containerRef = React.useRef(null);\n  var menuRef = React.useRef(null);\n  var targetRef = React.useRef(null);\n  var relatedTarget = React.useRef(null);\n  var styleElementRef = React.useRef(null);\n  var searchValue = React.useRef(null);\n  var searchTimeout = React.useRef(null);\n  var isMobileMode = useMatchMedia(\"screen and (max-width: \".concat(props.breakpoint, \")\"), !!props.breakpoint);\n  var _useEventListener = useEventListener({\n      type: 'click',\n      listener: function listener(event) {\n        var isOutsideContainer = containerRef.current && !containerRef.current.contains(event.target);\n        var isOutsideTarget = props.popup ? !(targetRef.current && (targetRef.current === event.target || targetRef.current.contains(event.target))) : true;\n        if (isOutsideContainer && isOutsideTarget) {\n          hide(event, !props.popup);\n        }\n      }\n    }),\n    _useEventListener2 = _slicedToArray(_useEventListener, 2),\n    bindDocumentClickListener = _useEventListener2[0],\n    unbindDocumentClickListener = _useEventListener2[1];\n  var _useResizeListener = useResizeListener({\n      listener: function listener() {\n        !isMobileMode && hide(event, true);\n      }\n    }),\n    _useResizeListener2 = _slicedToArray(_useResizeListener, 2),\n    bindDocumentResizeListener = _useResizeListener2[0],\n    unbindDocumentResizeListener = _useResizeListener2[1];\n  var onPanelClick = function onPanelClick(event) {\n    if (props.popup) {\n      OverlayService.emit('overlay-click', {\n        originalEvent: event,\n        target: targetRef.current\n      });\n    }\n  };\n  var toggle = function toggle(event) {\n    if (props.popup) {\n      visibleState ? hide(event) : show(event);\n    }\n  };\n  var show = function show(event) {\n    if (props.popup) {\n      targetRef.current = event.currentTarget;\n      setVisibleState(true);\n      props.onShow && props.onShow(event);\n      relatedTarget.current = event.relatedTarget || null;\n    }\n    setFocusedItemInfo({\n      index: findFirstFocusedItemIndex(),\n      level: 0,\n      parentKey: ''\n    });\n  };\n  var hide = function hide(event, isFocus) {\n    if (props.popup) {\n      setVisibleState(false);\n      props.onHide && props.onHide(event);\n    }\n    var menuElement = getMenuElement();\n    setActiveItemPath([]);\n    setFocusedItemInfo({\n      index: -1,\n      level: 0,\n      parentKey: ''\n    });\n    isFocus && DomHandler.focus(relatedTarget.current || targetRef.current || menuElement);\n    setDirty(false);\n  };\n  var onFocus = function onFocus(event) {\n    setFocused(true);\n    setFocusedItemInfo(focusedItemInfo.index !== -1 ? focusedItemInfo : {\n      index: findFirstFocusedItemIndex(),\n      level: 0,\n      parentKey: ''\n    });\n    props.onFocus && props.onFocus(event);\n  };\n  var onBlur = function onBlur(event) {\n    setFocused(false);\n    setFocusedItemInfo({\n      index: -1,\n      level: 0,\n      parentKey: ''\n    });\n    searchValue.current = '';\n    setDirty(false);\n    props.onBlur && props.onBlur(event);\n  };\n  var onKeyDown = function onKeyDown(event) {\n    var metaKey = event.metaKey || event.ctrlKey;\n    switch (event.code) {\n      case 'ArrowDown':\n        onArrowDownKey(event);\n        break;\n      case 'ArrowUp':\n        onArrowUpKey(event);\n        break;\n      case 'ArrowLeft':\n        onArrowLeftKey(event);\n        break;\n      case 'ArrowRight':\n        onArrowRightKey(event);\n        break;\n      case 'Home':\n        onHomeKey(event);\n        break;\n      case 'End':\n        onEndKey(event);\n        break;\n      case 'Space':\n        onSpaceKey(event);\n        break;\n      case 'Enter':\n      case 'NumpadEnter':\n        onEnterKey(event);\n        break;\n      case 'Escape':\n        props.popup && DomHandler.focus(targetRef.current);\n        onEscapeKey(event);\n        break;\n      case 'Tab':\n        onTabKey(event);\n        break;\n      case 'PageDown':\n      case 'PageUp':\n      case 'Backspace':\n      case 'ShiftLeft':\n      case 'ShiftRight':\n        //NOOP\n        break;\n      default:\n        if (!metaKey && ObjectUtils.isPrintableCharacter(event.key)) {\n          searchItems(event.key);\n        }\n        break;\n    }\n  };\n  var onItemChange = function onItemChange(event) {\n    var processedItem = event.processedItem,\n      isFocus = event.isFocus;\n    if (ObjectUtils.isEmpty(processedItem)) {\n      return;\n    }\n    var index = processedItem.index,\n      key = processedItem.key,\n      level = processedItem.level,\n      parentKey = processedItem.parentKey,\n      items = processedItem.items;\n    var grouped = ObjectUtils.isNotEmpty(items);\n    var _activeItemPath = activeItemPath.filter(function (p) {\n      return p.parentKey !== parentKey && p.parentKey !== key;\n    });\n    if (grouped) {\n      _activeItemPath.push(processedItem);\n    }\n    setFocusedItemInfo({\n      index: index,\n      level: level,\n      parentKey: parentKey\n    });\n    setActiveItemPath(_activeItemPath);\n    grouped && setDirty(true);\n    isFocus && DomHandler.focus(getMenuElement());\n  };\n  var onItemClick = function onItemClick(event) {\n    var originalEvent = event.originalEvent,\n      processedItem = event.processedItem;\n    if (isItemDisabled(processedItem) || props.isMobileMode) {\n      return;\n    }\n    var grouped = isProccessedItemGroup(processedItem);\n    var root = ObjectUtils.isEmpty(processedItem.parent);\n    var selected = isSelected(processedItem);\n    var menuElement = getMenuElement();\n    if (selected) {\n      var index = processedItem.index,\n        key = processedItem.key,\n        level = processedItem.level,\n        parentKey = processedItem.parentKey;\n      setActiveItemPath(activeItemPath.filter(function (p) {\n        return key !== p.key && key.startsWith(p.key);\n      }));\n      setFocusedItemInfo({\n        index: index,\n        level: level,\n        parentKey: parentKey\n      });\n      if (!grouped) {\n        setDirty(!root);\n      }\n      setTimeout(function () {\n        DomHandler.focus(menuElement);\n        if (grouped) {\n          setDirty(true);\n        }\n      }, 0);\n    } else if (grouped) {\n      DomHandler.focus(menuElement);\n      onItemChange(event);\n    } else {\n      var rootProcessedItem = root ? processedItem : activeItemPath.find(function (p) {\n        return p.parentKey === '';\n      });\n      var rootProcessedItemIndex = rootProcessedItem ? rootProcessedItem.index : -1;\n      hide(originalEvent, true);\n      setFocusedItemInfo({\n        index: rootProcessedItemIndex,\n        parentKey: rootProcessedItem ? rootProcessedItem.parentKey : ''\n      });\n    }\n  };\n  var onItemMouseEnter = function onItemMouseEnter(event) {\n    var originalEvent = event.originalEvent,\n      processedItem = event.processedItem;\n    if (isItemDisabled(processedItem) || props.isMobileMode) {\n      originalEvent.preventDefault();\n      return;\n    }\n    if (dirty && !props.popup) {\n      onItemChange(event);\n    }\n  };\n  var onArrowDownKey = function onArrowDownKey(event) {\n    var itemIndex = focusedItemInfo.index !== -1 ? findNextItemIndex(focusedItemInfo.index) : findFirstFocusedItemIndex();\n    changeFocusedItemIndex(itemIndex);\n    event.preventDefault();\n  };\n  var onArrowUpKey = function onArrowUpKey(event) {\n    if (event.altKey) {\n      if (props.popup) {\n        DomHandler.focus(targetRef.current);\n      }\n      if (focusedItemInfo.index !== -1) {\n        var processedItem = visibleItems[focusedItemInfo.index];\n        var grouped = isProccessedItemGroup(processedItem);\n        !grouped && onItemChange({\n          originalEvent: event,\n          processedItem: processedItem\n        });\n      }\n      props.popup && hide(event, true);\n      event.preventDefault();\n    } else {\n      var itemIndex = focusedItemInfo.index !== -1 ? findPrevItemIndex(focusedItemInfo.index) : findLastFocusedItemIndex();\n      changeFocusedItemIndex(itemIndex);\n      event.preventDefault();\n    }\n  };\n  var onArrowLeftKey = function onArrowLeftKey(event) {\n    var processedItem = visibleItems[focusedItemInfo.index];\n    var parentItem = activeItemPath.find(function (p) {\n      return p.key === processedItem.parentKey;\n    });\n    var root = ObjectUtils.isEmpty(processedItem.parent);\n    if (!root) {\n      setFocusedItemInfo({\n        index: -1,\n        parentKey: parentItem ? parentItem.parentKey : ''\n      });\n      searchValue.current = '';\n      setTimeout(function () {\n        return setFocusTrigger(true);\n      }, 0);\n    }\n    setActiveItemPath(activeItemPath.filter(function (p) {\n      return p.parentKey !== focusedItemInfo.parentKey;\n    }));\n    event.preventDefault();\n  };\n  var onArrowRightKey = function onArrowRightKey(event) {\n    var processedItem = visibleItems[focusedItemInfo.index];\n    var grouped = isProccessedItemGroup(processedItem);\n    if (grouped) {\n      onItemChange({\n        originalEvent: event,\n        processedItem: processedItem\n      });\n      setFocusedItemInfo({\n        index: -1,\n        parentKey: processedItem.key\n      });\n      searchValue.current = '';\n      setTimeout(function () {\n        return setFocusTrigger(true);\n      }, 0);\n    }\n    event.preventDefault();\n  };\n  var onHomeKey = function onHomeKey(event) {\n    changeFocusedItemIndex(findFirstItemIndex());\n    event.preventDefault();\n  };\n  var onEndKey = function onEndKey(event) {\n    changeFocusedItemIndex(findLastItemIndex());\n    event.preventDefault();\n  };\n  var onEnterKey = function onEnterKey(event) {\n    if (focusedItemInfo.index !== -1) {\n      var _element = DomHandler.findSingle(getMenuElement(), \"li[id=\\\"\".concat(\"\".concat(focusedItemId), \"\\\"]\"));\n      var anchorElement = _element && DomHandler.findSingle(_element, '[data-pc-section=\"action\"]');\n      props.popup && DomHandler.focus(targetRef.current);\n      anchorElement ? anchorElement.click() : _element && _element.click();\n    }\n    event.preventDefault();\n  };\n  var onSpaceKey = function onSpaceKey(event) {\n    onEnterKey(event);\n  };\n  var onEscapeKey = function onEscapeKey(event) {\n    hide(event, true);\n    !props.popup && setFocusedItemInfo(_objectSpread(_objectSpread({}, focusedItemInfo), {}, {\n      index: findFirstFocusedItemIndex()\n    }));\n    event.preventDefault();\n  };\n  var onTabKey = function onTabKey(event) {\n    if (focusedItemInfo.index !== -1) {\n      var processedItem = visibleItems[focusedItemInfo.index];\n      var grouped = isProccessedItemGroup(processedItem);\n      !grouped && onItemChange({\n        originalEvent: event,\n        processedItem: processedItem\n      });\n    }\n    hide(event);\n  };\n  var getMenuElement = function getMenuElement() {\n    return menuRef.current.getElement() || null;\n  };\n  var getItemProp = function getItemProp(item, name) {\n    return item ? ObjectUtils.getItemValue(item[name]) : undefined;\n  };\n  var getItemLabel = function getItemLabel(item) {\n    return getItemProp(item, 'label');\n  };\n  var isItemDisabled = function isItemDisabled(item) {\n    return getItemProp(item, 'disabled');\n  };\n  var isItemSeparator = function isItemSeparator(item) {\n    return getItemProp(item, 'separator');\n  };\n  var getProccessedItemLabel = function getProccessedItemLabel(processedItem) {\n    return processedItem ? getItemLabel(processedItem.item) : undefined;\n  };\n  var isProccessedItemGroup = function isProccessedItemGroup(processedItem) {\n    return processedItem && ObjectUtils.isNotEmpty(processedItem.items);\n  };\n  var isItemMatched = function isItemMatched(processedItem) {\n    return isValidItem(processedItem) && getProccessedItemLabel(processedItem).toLocaleLowerCase().startsWith(searchValue.current.toLocaleLowerCase());\n  };\n  var isValidItem = function isValidItem(processedItem) {\n    return !!processedItem && !isItemDisabled(processedItem.item) && !isItemSeparator(processedItem.item);\n  };\n  var isValidSelectedItem = function isValidSelectedItem(processedItem) {\n    return isValidItem(processedItem) && isSelected(processedItem);\n  };\n  var isSelected = function isSelected(processedItem) {\n    return activeItemPath.some(function (p) {\n      return p.key === processedItem.key;\n    });\n  };\n  var findFirstItemIndex = function findFirstItemIndex() {\n    return visibleItems.findIndex(function (processedItem) {\n      return isValidItem(processedItem);\n    });\n  };\n  var findLastItemIndex = function findLastItemIndex() {\n    return ObjectUtils.findLastIndex(visibleItems, function (processedItem) {\n      return isValidItem(processedItem);\n    });\n  };\n  var findNextItemIndex = function findNextItemIndex(index) {\n    var matchedItemIndex = index < visibleItems.length - 1 ? visibleItems.slice(index + 1).findIndex(function (processedItem) {\n      return isValidItem(processedItem);\n    }) : -1;\n    return matchedItemIndex > -1 ? matchedItemIndex + index + 1 : index;\n  };\n  var findPrevItemIndex = function findPrevItemIndex(index) {\n    var matchedItemIndex = index > 0 ? ObjectUtils.findLastIndex(visibleItems.slice(0, index), function (processedItem) {\n      return isValidItem(processedItem);\n    }) : -1;\n    return matchedItemIndex > -1 ? matchedItemIndex : index;\n  };\n  var findSelectedItemIndex = function findSelectedItemIndex() {\n    return visibleItems.findIndex(function (processedItem) {\n      return isValidSelectedItem(processedItem);\n    });\n  };\n  var findFirstFocusedItemIndex = function findFirstFocusedItemIndex() {\n    var selectedIndex = findSelectedItemIndex();\n    return selectedIndex < 0 ? findFirstItemIndex() : selectedIndex;\n  };\n  var findLastFocusedItemIndex = function findLastFocusedItemIndex() {\n    var selectedIndex = findSelectedItemIndex();\n    return selectedIndex < 0 ? findLastItemIndex() : selectedIndex;\n  };\n  var searchItems = function searchItems(_char) {\n    searchValue.current = (searchValue.current || '') + _char;\n    var itemIndex = -1;\n    var matched = false;\n    if (focusedItemInfo.index !== -1) {\n      itemIndex = visibleItems.slice(focusedItemInfo.index).findIndex(function (processedItem) {\n        return isItemMatched(processedItem);\n      });\n      itemIndex = itemIndex === -1 ? visibleItems.slice(0, focusedItemInfo.index).findIndex(function (processedItem) {\n        return isItemMatched(processedItem);\n      }) : itemIndex + focusedItemInfo.index;\n    } else {\n      itemIndex = visibleItems.findIndex(function (processedItem) {\n        return isItemMatched(processedItem);\n      });\n    }\n    if (itemIndex !== -1) {\n      matched = true;\n    }\n    if (itemIndex === -1 && focusedItemInfo.index === -1) {\n      itemIndex = findFirstFocusedItemIndex();\n    }\n    if (itemIndex !== -1) {\n      changeFocusedItemIndex(itemIndex);\n    }\n    if (searchTimeout.current) {\n      clearTimeout(searchTimeout);\n    }\n    searchTimeout.current = setTimeout(function () {\n      searchValue.current = '';\n      searchTimeout.current = null;\n    }, 500);\n    return matched;\n  };\n  var changeFocusedItemIndex = function changeFocusedItemIndex(index) {\n    if (focusedItemInfo.index !== index) {\n      setFocusedItemInfo(_objectSpread(_objectSpread({}, focusedItemInfo), {}, {\n        index: index\n      }));\n      scrollInView();\n    }\n  };\n  var scrollInView = function scrollInView() {\n    var index = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : -1;\n    var id = index !== -1 ? \"\".concat(idState, \"_\").concat(index) : focusedItemId;\n    var element = DomHandler.findSingle(getMenuElement(), \"li[id=\\\"\".concat(id, \"\\\"]\"));\n    if (element) {\n      element.scrollIntoView && element.scrollIntoView({\n        block: 'nearest',\n        inline: 'start'\n      });\n    }\n  };\n  var createProcessedItems = React.useCallback(function (items) {\n    var level = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 0;\n    var parent = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n    var parentKey = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';\n    var processedItems = [];\n    items && items.forEach(function (item, index) {\n      var key = (parentKey !== '' ? parentKey + '_' : '') + index;\n      var newItem = {\n        item: item,\n        index: index,\n        level: level,\n        key: key,\n        parent: parent,\n        parentKey: parentKey\n      };\n      newItem.items = createProcessedItems(item.items, level + 1, newItem, key);\n      processedItems.push(newItem);\n    });\n    return processedItems;\n  }, []);\n  var createStyle = function createStyle() {\n    if (!styleElementRef.current) {\n      styleElementRef.current = DomHandler.createInlineStyle(context && context.nonce || PrimeReact.nonce, context && context.styleContainer);\n      var selector = \"\".concat(attributeSelectorState);\n      var innerHTML = \"\\n@media screen and (max-width: \".concat(props.breakpoint, \") {\\n    .p-tieredmenu[\").concat(selector, \"] > ul {\\n        max-height: \").concat(props.scrollHeight, \";\\n        overflow: \").concat(props.scrollHeight ? 'auto' : '', \";\\n    }\\n\\n    .p-tieredmenu[\").concat(selector, \"] .p-submenu-list {\\n        position: relative;\\n    }\\n\\n    .p-tieredmenu[\").concat(selector, \"] .p-menuitem-active > .p-submenu-list {\\n        left: 0;\\n        box-shadow: none;\\n        border-radius: 0;\\n        padding: 0 0 0 calc(var(--inline-spacing) * 2); /* @todo */\\n    }\\n\\n    .p-tieredmenu[\").concat(selector, \"] .p-menuitem-active > .p-menuitem-link > .p-submenu-icon {\\n        transform: rotate(-180deg);\\n    }\\n\\n    .p-tieredmenu[\").concat(selector, \"] .p-submenu-icon:before {\\n        content: \\\"\\\\e930\\\";\\n    }\\n\\n    \").concat(!props.popup ? \".p-tieredmenu[\".concat(selector, \"] { width: 100%; }\") : '', \"\\n}\\n\");\n      styleElementRef.current.innerHTML = innerHTML;\n    }\n  };\n  var destroyStyle = function destroyStyle() {\n    styleElementRef.current = DomHandler.removeInlineStyle(styleElementRef.current);\n  };\n  var alignOverlay = function alignOverlay() {\n    var calculateMinWidth = DomHandler.getOuterWidth(targetRef.current) > DomHandler.getOuterWidth(containerRef.current);\n    DomHandler.alignOverlay(containerRef.current, targetRef.current, props.appendTo, calculateMinWidth);\n  };\n  var onEnter = function onEnter() {\n    if (props.autoZIndex) {\n      ZIndexUtils.set('menu', containerRef.current, context && context.autoZIndex || PrimeReact.autoZIndex, props.baseZIndex || context && context.zIndex.menu || PrimeReact.zIndex.menu);\n    }\n    DomHandler.addStyles(containerRef.current, {\n      position: 'absolute',\n      top: '0',\n      left: '0'\n    });\n    alignOverlay();\n    DomHandler.focus(menuRef.current.getElement());\n    scrollInView();\n    if (attributeSelectorState && props.breakpoint) {\n      containerRef.current.setAttribute(attributeSelectorState, '');\n      createStyle();\n    }\n  };\n  var onEntered = function onEntered() {\n    bindDocumentClickListener();\n    bindDocumentResizeListener();\n  };\n  var onExit = function onExit() {\n    targetRef.current = null;\n    unbindDocumentClickListener();\n    unbindDocumentResizeListener();\n  };\n  var onExited = function onExited() {\n    ZIndexUtils.clear(containerRef.current);\n    destroyStyle();\n  };\n  useMountEffect(function () {\n    var uniqueId = UniqueComponentId();\n    !idState && setIdState(uniqueId);\n    if (props.breakpoint) {\n      !attributeSelectorState && setAttributeSelectorState(uniqueId);\n    }\n  });\n  React.useEffect(function () {\n    var itemsToProcess = props.model || [];\n    var processed = createProcessedItems(itemsToProcess);\n    setProcessedItems(processed);\n  }, [props.model, createProcessedItems]);\n  useUpdateEffect(function () {\n    var processedItem = activeItemPath.find(function (p) {\n      return p.key === focusedItemInfo.parentKey;\n    });\n    var processed = processedItem ? processedItem.items : processedItems;\n    setVisibleItems(processed);\n  }, [activeItemPath, focusedItemInfo, processedItems]);\n  useUpdateEffect(function () {\n    var focusedId = focusedItemInfo.index !== -1 ? \"\".concat(idState).concat(ObjectUtils.isNotEmpty(focusedItemInfo.parentKey) ? '_' + focusedItemInfo.parentKey : '', \"_\").concat(focusedItemInfo.index) : null;\n    setFocusedItemId(focusedId);\n  }, [focusedItemInfo]);\n  useUpdateEffect(function () {\n    if (!props.popup) {\n      if (ObjectUtils.isNotEmpty(activeItemPath)) {\n        bindDocumentClickListener();\n        bindDocumentResizeListener();\n      } else {\n        unbindDocumentClickListener();\n        unbindDocumentResizeListener();\n      }\n    }\n  }, [activeItemPath]);\n  useUpdateEffect(function () {\n    if (focusTrigger) {\n      var itemIndex = focusedItemInfo.index !== -1 ? findNextItemIndex(focusedItemInfo.index) : findFirstFocusedItemIndex();\n      changeFocusedItemIndex(itemIndex);\n      setActiveItemPath(activeItemPath.filter(function (p) {\n        return p.parentKey !== focusedItemInfo.parentKey;\n      }));\n      setFocusTrigger(false);\n    }\n  }, [focusTrigger]);\n  useUpdateEffect(function () {\n    if (attributeSelectorState && containerRef.current) {\n      containerRef.current.setAttribute(attributeSelectorState, '');\n      createStyle();\n    }\n    return function () {\n      destroyStyle();\n    };\n  }, [attributeSelectorState, props.breakpoint]);\n  useUnmountEffect(function () {\n    ZIndexUtils.clear(containerRef.current);\n  });\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      toggle: toggle,\n      show: show,\n      hide: hide,\n      getElement: function getElement() {\n        return containerRef.current;\n      }\n    };\n  });\n  var createElement = function createElement() {\n    var rootProps = mergeProps({\n      ref: containerRef,\n      id: props.id,\n      className: classNames(props.className, cx('root')),\n      style: props.style,\n      onClick: onPanelClick\n    }, TieredMenuBase.getOtherProps(props), ptm('root'));\n    var transitionProps = mergeProps({\n      classNames: cx('transition'),\n      \"in\": visibleState,\n      timeout: {\n        enter: 120,\n        exit: 100\n      },\n      options: props.transitionOptions,\n      unmountOnExit: true,\n      onEnter: onEnter,\n      onEntered: onEntered,\n      onExit: onExit,\n      onExited: onExited\n    }, ptm('transition'));\n    return /*#__PURE__*/React.createElement(CSSTransition, _extends({\n      nodeRef: containerRef\n    }, transitionProps), /*#__PURE__*/React.createElement(\"div\", rootProps, /*#__PURE__*/React.createElement(TieredMenuSub, {\n      id: idState + '_list',\n      ref: menuRef,\n      hostName: \"TieredMenu\",\n      menuProps: props,\n      tabIndex: 0,\n      model: processedItems,\n      ariaLabel: props.ariaLabel,\n      ariaLabelledBy: props.ariaLabelledBy,\n      ariaOrientation: \"vertical\",\n      ariaActiveDescendant: focused ? focusedItemId : undefined,\n      menuId: idState,\n      level: 0,\n      focusedItemId: focusedItemId,\n      activeItemPath: activeItemPath,\n      onFocus: onFocus,\n      onBlur: onBlur,\n      onKeyDown: onKeyDown,\n      onItemClick: onItemClick,\n      onItemMouseEnter: onItemMouseEnter,\n      root: true,\n      popup: props.popup,\n      onHide: hide,\n      isMobileMode: isMobileMode,\n      submenuIcon: props.submenuIcon,\n      ptm: ptm,\n      cx: cx,\n      sx: sx\n    })));\n  };\n  var element = createElement();\n  return props.popup ? /*#__PURE__*/React.createElement(Portal, {\n    element: element,\n    appendTo: props.appendTo\n  }) : element;\n}));\nTieredMenu.displayName = 'TieredMenu';\nexport { TieredMenu };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}