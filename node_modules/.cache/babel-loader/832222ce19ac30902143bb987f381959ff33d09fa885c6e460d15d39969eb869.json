{"ast":null,"code":"'use client';\n\nimport * as React from 'react';\nimport { PrimeReactContext } from 'primereact/api';\nimport { ComponentBase, useHandleStyle } from 'primereact/componentbase';\nimport { useMergeProps } from 'primereact/hooks';\nimport { classNames, ObjectUtils, DomHandler, IconUtils } from 'primereact/utils';\nfunction _typeof(o) {\n  \"@babel/helpers - typeof\";\n\n  return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) {\n    return typeof o;\n  } : function (o) {\n    return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o;\n  }, _typeof(o);\n}\nfunction _toPrimitive(input, hint) {\n  if (_typeof(input) !== \"object\" || input === null) return input;\n  var prim = input[Symbol.toPrimitive];\n  if (prim !== undefined) {\n    var res = prim.call(input, hint || \"default\");\n    if (_typeof(res) !== \"object\") return res;\n    throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n  }\n  return (hint === \"string\" ? String : Number)(input);\n}\nfunction _toPropertyKey(arg) {\n  var key = _toPrimitive(arg, \"string\");\n  return _typeof(key) === \"symbol\" ? key : String(key);\n}\nfunction _defineProperty(obj, key, value) {\n  key = _toPropertyKey(key);\n  if (key in obj) {\n    Object.defineProperty(obj, key, {\n      value: value,\n      enumerable: true,\n      configurable: true,\n      writable: true\n    });\n  } else {\n    obj[key] = value;\n  }\n  return obj;\n}\nfunction _extends() {\n  _extends = Object.assign ? Object.assign.bind() : function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n  return _extends.apply(this, arguments);\n}\nfunction _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}\nfunction _iterableToArrayLimit(r, l) {\n  var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"];\n  if (null != t) {\n    var e,\n      n,\n      i,\n      u,\n      a = [],\n      f = !0,\n      o = !1;\n    try {\n      if (i = (t = t.call(r)).next, 0 === l) {\n        if (Object(t) !== t) return;\n        f = !1;\n      } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0);\n    } catch (r) {\n      o = !0, n = r;\n    } finally {\n      try {\n        if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return;\n      } finally {\n        if (o) throw n;\n      }\n    }\n    return a;\n  }\n}\nfunction _arrayLikeToArray(arr, len) {\n  if (len == null || len > arr.length) len = arr.length;\n  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n  return arr2;\n}\nfunction _unsupportedIterableToArray(o, minLen) {\n  if (!o) return;\n  if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n  var n = Object.prototype.toString.call(o).slice(8, -1);\n  if (n === \"Object\" && o.constructor) n = o.constructor.name;\n  if (n === \"Map\" || n === \"Set\") return Array.from(o);\n  if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\nfunction _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\nfunction _slicedToArray(arr, i) {\n  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\nvar classes = {\n  root: function root(_ref) {\n    var props = _ref.props,\n      state = _ref.state;\n    return classNames('p-avatar p-component', {\n      'p-avatar-image': ObjectUtils.isNotEmpty(props.image) && !state.imageFailed,\n      'p-avatar-circle': props.shape === 'circle',\n      'p-avatar-lg': props.size === 'large',\n      'p-avatar-xl': props.size === 'xlarge',\n      'p-avatar-clickable': !!props.onClick\n    });\n  },\n  label: 'p-avatar-text',\n  icon: 'p-avatar-icon'\n};\nvar styles = \"\\n@layer primereact {\\n    .p-avatar {\\n        display: inline-flex;\\n        align-items: center;\\n        justify-content: center;\\n        width: 2rem;\\n        height: 2rem;\\n        font-size: 1rem;\\n    }\\n    \\n    .p-avatar.p-avatar-image {\\n        background-color: transparent;\\n    }\\n    \\n    .p-avatar.p-avatar-circle {\\n        border-radius: 50%;\\n    }\\n    \\n    .p-avatar.p-avatar-circle img {\\n        border-radius: 50%;\\n    }\\n    \\n    .p-avatar .p-avatar-icon {\\n        font-size: 1rem;\\n    }\\n    \\n    .p-avatar img {\\n        width: 100%;\\n        height: 100%;\\n    }\\n    \\n    .p-avatar-clickable {\\n        cursor: pointer;\\n    }\\n}\\n\";\nvar AvatarBase = ComponentBase.extend({\n  defaultProps: {\n    __TYPE: 'Avatar',\n    className: null,\n    icon: null,\n    image: null,\n    imageAlt: 'avatar',\n    imageFallback: 'default',\n    label: null,\n    onImageError: null,\n    shape: 'square',\n    size: 'normal',\n    style: null,\n    template: null,\n    children: undefined\n  },\n  css: {\n    classes: classes,\n    styles: styles\n  }\n});\nfunction ownKeys(e, r) {\n  var t = Object.keys(e);\n  if (Object.getOwnPropertySymbols) {\n    var o = Object.getOwnPropertySymbols(e);\n    r && (o = o.filter(function (r) {\n      return Object.getOwnPropertyDescriptor(e, r).enumerable;\n    })), t.push.apply(t, o);\n  }\n  return t;\n}\nfunction _objectSpread(e) {\n  for (var r = 1; r < arguments.length; r++) {\n    var t = null != arguments[r] ? arguments[r] : {};\n    r % 2 ? ownKeys(Object(t), !0).forEach(function (r) {\n      _defineProperty(e, r, t[r]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) {\n      Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r));\n    });\n  }\n  return e;\n}\nvar Avatar = /*#__PURE__*/React.forwardRef(function (inProps, ref) {\n  var mergeProps = useMergeProps();\n  var context = React.useContext(PrimeReactContext);\n  var props = AvatarBase.getProps(inProps, context);\n  var elementRef = React.useRef(null);\n  var _React$useState = React.useState(false),\n    _React$useState2 = _slicedToArray(_React$useState, 2),\n    imageFailed = _React$useState2[0],\n    setImageFailed = _React$useState2[1];\n  var _React$useState3 = React.useState(false),\n    _React$useState4 = _slicedToArray(_React$useState3, 2),\n    nested = _React$useState4[0],\n    setNested = _React$useState4[1];\n  var _AvatarBase$setMetaDa = AvatarBase.setMetaData({\n      props: props,\n      state: {\n        imageFailed: imageFailed,\n        nested: nested\n      }\n    }),\n    ptm = _AvatarBase$setMetaDa.ptm,\n    cx = _AvatarBase$setMetaDa.cx,\n    isUnstyled = _AvatarBase$setMetaDa.isUnstyled;\n  useHandleStyle(AvatarBase.css.styles, isUnstyled, {\n    name: 'avatar'\n  });\n  var createContent = function createContent() {\n    if (ObjectUtils.isNotEmpty(props.image) && !imageFailed) {\n      var imageProps = mergeProps({\n        src: props.image,\n        onError: onImageError\n      }, ptm('image'));\n      return /*#__PURE__*/React.createElement(\"img\", _extends({\n        alt: props.imageAlt\n      }, imageProps));\n    } else if (props.label) {\n      var labelProps = mergeProps({\n        className: cx('label')\n      }, ptm('label'));\n      return /*#__PURE__*/React.createElement(\"span\", labelProps, props.label);\n    } else if (props.icon) {\n      var iconProps = mergeProps({\n        className: cx('icon')\n      }, ptm('icon'));\n      return IconUtils.getJSXIcon(props.icon, _objectSpread({}, iconProps), {\n        props: props\n      });\n    }\n    return null;\n  };\n  var onImageError = function onImageError(event) {\n    if (props.imageFallback === 'default') {\n      if (!props.onImageError) {\n        // fallback to label or icon\n        setImageFailed(true);\n        event.target.src = null;\n      }\n    } else {\n      // try fallback as an image\n      event.target.src = props.imageFallback;\n    }\n    props.onImageError && props.onImageError(event);\n  };\n  React.useEffect(function () {\n    var nested = DomHandler.isAttributeEquals(elementRef.current.parentElement, 'data-pc-name', 'avatargroup');\n    setNested(nested);\n  }, []);\n  React.useImperativeHandle(ref, function () {\n    return {\n      props: props,\n      getElement: function getElement() {\n        return elementRef.current;\n      }\n    };\n  });\n  var rootProps = mergeProps({\n    ref: elementRef,\n    style: props.style,\n    className: classNames(props.className, cx('root', {\n      imageFailed: imageFailed\n    }))\n  }, AvatarBase.getOtherProps(props), ptm('root'));\n  var content = props.template ? ObjectUtils.getJSXElement(props.template, props) : createContent();\n  return /*#__PURE__*/React.createElement(\"div\", rootProps, content, props.children);\n});\nAvatar.displayName = 'Avatar';\nexport { Avatar };","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}